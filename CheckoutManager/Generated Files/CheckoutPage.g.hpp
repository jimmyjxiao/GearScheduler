//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "CheckoutPage.xaml.h"

void ::CheckoutManager::CheckoutPage::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///CheckoutPage.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class CheckoutManager::CheckoutPage::CheckoutPage_obj6_Bindings 
    : public ::XamlBindingInfo::ValueTypeXamlBindings<::CheckoutManager::refCheckout, ::XamlBindingInfo::XamlBindingTrackingBase>
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    CheckoutPage_obj6_Bindings()
    {
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 6: // CheckoutPage.xaml line 181
                this->obj6 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 7: // CheckoutPage.xaml line 206
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::SymbolIcon^>(__target);
                break;
            case 8: // CheckoutPage.xaml line 203
                this->obj8 = safe_cast<::Windows::UI::Xaml::Controls::SymbolIcon^>(__target);
                break;
            case 9: // CheckoutPage.xaml line 200
                this->obj9 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 10: // CheckoutPage.xaml line 197
                this->obj10 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 11: // CheckoutPage.xaml line 194
                this->obj11 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 12: // CheckoutPage.xaml line 191
                this->obj12 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::CheckoutManager::refCheckout>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj6.Resolve<::Windows::UI::Xaml::Controls::Grid>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::CheckoutManager::refCheckout) item, 1 << phase);
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj6;
    ::Windows::UI::Xaml::Controls::SymbolIcon^ obj7;
    ::Windows::UI::Xaml::Controls::SymbolIcon^ obj8;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj9;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj10;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj11;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj12;

    // Update methods for each path node used in binding steps.
    void Update_(::CheckoutManager::refCheckout obj, int phase)
    {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_returned(obj.returned, phase);
                this->Update_checkedout(obj.checkedout, phase);
                this->Update_returnTime(obj.returnTime, phase);
                this->Update_CheckoutTime(obj.CheckoutTime, phase);
                this->Update_team(obj.team, phase);
                this->Update_deviceType(obj.deviceType, phase);
            }
    }
    void Update_returned(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 206
            Set_Windows_UI_Xaml_Controls_SymbolIcon_Symbol(this->obj7, safe_cast<::Windows::UI::Xaml::Controls::Symbol>(this->LookupConverter("boolconv")->Convert(obj, ::Windows::UI::Xaml::Controls::Symbol::typeid, nullptr, nullptr)));
            // CheckoutPage.xaml line 206
            Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this->obj7, safe_cast<::Windows::UI::Xaml::Media::Brush^>(this->LookupConverter("boolcool")->Convert(obj, ::Windows::UI::Xaml::Media::Brush::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_checkedout(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 203
            Set_Windows_UI_Xaml_Controls_SymbolIcon_Symbol(this->obj8, safe_cast<::Windows::UI::Xaml::Controls::Symbol>(this->LookupConverter("boolconv")->Convert(obj, ::Windows::UI::Xaml::Controls::Symbol::typeid, nullptr, nullptr)));
            // CheckoutPage.xaml line 203
            Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this->obj8, safe_cast<::Windows::UI::Xaml::Media::Brush^>(this->LookupConverter("boolcool")->Convert(obj, ::Windows::UI::Xaml::Media::Brush::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_returnTime(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 200
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj9, obj, nullptr);
        }
    }
    void Update_CheckoutTime(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 197
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj10, obj, nullptr);
        }
    }
    void Update_team(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 194
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj11, obj, nullptr);
        }
    }
    void Update_deviceType(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 191
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj12, obj, nullptr);
        }
    }
    static void Set_Windows_UI_Xaml_Controls_SymbolIcon_Symbol(::Windows::UI::Xaml::Controls::SymbolIcon^ obj, ::Windows::UI::Xaml::Controls::Symbol value)
    {
        obj->Symbol = value;
    }
    static void Set_Windows_UI_Xaml_Controls_IconElement_Foreground(::Windows::UI::Xaml::Controls::IconElement^ obj, ::Windows::UI::Xaml::Media::Brush^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Media::Brush^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Media::Brush::typeid, targetNullValue);
        }
        obj->Foreground = value;
    }
    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class CheckoutManager::CheckoutPage::CheckoutPage_obj14_Bindings 
    : public ::XamlBindingInfo::ValueTypeXamlBindings<::CheckoutManager::overDueinfo, ::XamlBindingInfo::XamlBindingTrackingBase>
{
public:
    CheckoutPage_obj14_Bindings()
    {
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 14: // CheckoutPage.xaml line 98
                this->obj14 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 15: // CheckoutPage.xaml line 119
                this->obj15 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 16: // CheckoutPage.xaml line 116
                this->obj16 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 17: // CheckoutPage.xaml line 113
                this->obj17 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 18: // CheckoutPage.xaml line 110
                this->obj18 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 19: // CheckoutPage.xaml line 107
                this->obj19 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::CheckoutManager::overDueinfo>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj14.Resolve<::Windows::UI::Xaml::Controls::Grid>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::CheckoutManager::overDueinfo) item, 1 << phase);
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj14;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj15;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj16;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj17;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj18;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj19;

    // Update methods for each path node used in binding steps.
    void Update_(::CheckoutManager::overDueinfo obj, int phase)
    {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_user(obj.user, phase);
                this->Update_dueTime(obj.dueTime, phase);
                this->Update_checkedOutTime(obj.checkedOutTime, phase);
                this->Update_itemID(obj.itemID, phase);
                this->Update_itemType(obj.itemType, phase);
            }
    }
    void Update_user(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 119
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj15, obj, nullptr);
        }
    }
    void Update_dueTime(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 116
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj16, obj, nullptr);
        }
    }
    void Update_checkedOutTime(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 113
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj17, obj, nullptr);
        }
    }
    void Update_itemID(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 110
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj18, obj.ToString(), nullptr);
        }
    }
    void Update_itemType(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CheckoutPage.xaml line 107
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj19, obj, nullptr);
        }
    }
    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
};

void ::CheckoutManager::CheckoutPage::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 2:
        {
            this->CheckoutPanel = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
        }
        break;
    case 3:
        {
            this->overdueview = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
        }
        break;
    case 4:
        {
            this->currentListview = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
        }
        break;
    case 20:
        {
            this->returnBox = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->returnBox))->TextChanging += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs^>(this, (void (::CheckoutManager::CheckoutPage::*)
                (::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs^))&CheckoutPage::returnBox_TextChanging);
        }
        break;
    case 21:
        {
            this->Returnbutton = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Button^>(this->Returnbutton))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::CheckoutPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&CheckoutPage::Returnbutton_Click);
        }
        break;
    case 22:
        {
            this->returnBlock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 23:
        {
            this->IDbox = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->IDbox))->TextChanging += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs^>(this, (void (::CheckoutManager::CheckoutPage::*)
                (::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs^))&CheckoutPage::returnBox_TextChanging);
        }
        break;
    case 24:
        {
            this->teamSelector = safe_cast<::Windows::UI::Xaml::Controls::ComboBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::ComboBox^>(this->teamSelector))->SelectionChanged += ref new ::Windows::UI::Xaml::Controls::SelectionChangedEventHandler(this, (void (::CheckoutManager::CheckoutPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::SelectionChangedEventArgs^))&CheckoutPage::teamSelector_SelectionChanged);
        }
        break;
    case 25:
        {
            this->password = safe_cast<::Windows::UI::Xaml::Controls::PasswordBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::PasswordBox^>(this->password))->PasswordChanged += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::CheckoutPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&CheckoutPage::PasswordBox_PasswordChanged);
        }
        break;
    case 26:
        {
            this->checkoutbutton = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Button^>(this->checkoutbutton))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::CheckoutPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&CheckoutPage::Button_Click);
        }
        break;
    case 27:
        {
            this->warning = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 28:
        {
            this->statusBlock = safe_cast<::Windows::UI::Xaml::Controls::RichTextBlock^>(__target);
        }
        break;
    case 29:
        {
            this->devTypeblock = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
        }
        break;
    case 30:
        {
            this->IDblock = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
        }
        break;
    case 31:
        {
            this->userblock = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
        }
        break;
    case 32:
        {
            this->dueblock = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
        }
        break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::CheckoutManager::CheckoutPage::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 6: // CheckoutPage.xaml line 181
            {
                ::Windows::UI::Xaml::Controls::Grid^ element6 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                CheckoutPage_obj6_Bindings* objBindings = new CheckoutPage_obj6_Bindings();
                objBindings->SetDataRoot(element6->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element6);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element6, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element6, bindings);
            }
            break;
        case 14: // CheckoutPage.xaml line 98
            {
                ::Windows::UI::Xaml::Controls::Grid^ element14 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                CheckoutPage_obj14_Bindings* objBindings = new CheckoutPage_obj14_Bindings();
                objBindings->SetDataRoot(element14->DataContext);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element14);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element14, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element14, bindings);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


