//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "AddCheckout.xaml.h"
#include "AuthenticationDialog.xaml.h"
#include "Calpage.xaml.h"
#include "CheckoutPage.xaml.h"
#include "DeviceViewPage.xaml.h"
#include "LandingPage.xaml.h"
#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "TeamPage.xaml.h"
#include "WeekEvent.xaml.h"
#include "WeekViewControl.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "AddCheckout.g.hpp"
#include "AuthenticationDialog.g.hpp"
#include "Calpage.g.hpp"
#include "CheckoutPage.g.hpp"
#include "DeviceViewPage.g.hpp"
#include "LandingPage.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"
#include "TeamPage.g.hpp"
#include "WeekEvent.g.hpp"
#include "WeekViewControl.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_zoomed(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->zoomed);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_manuallyhidden(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->manuallyhidden);
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_cal(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->cal;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_dateRange(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->dateRange;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_CurrentCalendar(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->CurrentCalendar;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_bindDevices(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->bindDevices;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_devices(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->devices;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_deleteGroup(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->deleteGroup;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_key(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->key;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_color(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->color;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_numdevices(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->numdevices;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_dtf(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->dtf;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_datestr(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->datestr;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_AppFrame(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->AppFrame;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_bindTeams(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->bindTeams;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_teamName(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->teamName;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_background(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->background;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_timeStr(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->timeStr;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_deviceStr(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->deviceStr;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_teamStr(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->teamStr;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_zoomed(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->zoomed = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_manuallyhidden(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->manuallyhidden = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_cal(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->cal = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_devices(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->devices = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_key(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->key = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_color(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->color = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_numdevices(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->numdevices = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_teamName(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->teamName = safe_cast<TValue^>(value);
}

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    int     createFromStringIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    bool    isLocalType;
    bool    isSystemType;
    bool    isReturnTypeStub;
    bool    isBindable;
};


std::function<::Platform::Object^(::Platform::String^)> CreateFromStringMethods[] =
{
    nullptr //Last entry is for padding
};

const TypeInfo TypeInfos[] = 
{
    //   0
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   1
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   2
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   3
    L"System.ValueType", L"",
    nullptr, nullptr, nullptr, nullptr,
    0, // Object
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //   4
    L"CheckoutManager.Team", L"",
    &ActivateType<::CheckoutManager::Team>, nullptr, nullptr, nullptr,
    0, // Object
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   5
    L"converters.booltocolor", L"",
    &ActivateType<::converters::booltocolor>, nullptr, nullptr, nullptr,
    0, // Object
    2, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   6
    L"CheckoutManager.device", L"",
    nullptr, nullptr, nullptr, nullptr,
    3, // System.ValueType
    2, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   7
    L"CheckoutManager.CalInfo", L"",
    nullptr, nullptr, nullptr, nullptr,
    0, // Object
    2, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, true,  false,
    //   8
    L"CheckoutManager.Calpage", L"",
    &ActivateType<::CheckoutManager::Calpage>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    2, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   9
    L"CheckoutManager.MainPage", L"",
    &ActivateType<::CheckoutManager::MainPage>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    3, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  10
    L"CheckoutManager.TeamPage", L"",
    &ActivateType<::CheckoutManager::TeamPage>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    4, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  11
    L"CheckoutManager.WeekEvent", L"",
    nullptr, nullptr, nullptr, nullptr,
    23, // Windows.UI.Xaml.Controls.UserControl
    5, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  12
    L"CheckoutManager.grouptostr", L"",
    &ActivateType<::CheckoutManager::grouptostr>, nullptr, nullptr, nullptr,
    0, // Object
    10, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  13
    L"CheckoutManager.AddCheckout", L"",
    &ActivateType<::CheckoutManager::AddCheckout>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    10, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  14
    L"CheckoutManager.LandingPage", L"",
    &ActivateType<::CheckoutManager::LandingPage>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    10, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  15
    L"CheckoutManager.CheckoutPage", L"",
    &ActivateType<::CheckoutManager::CheckoutPage>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    13, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  16
    L"CheckoutManager.devicesGroup", L"",
    &ActivateType<::CheckoutManager::devicesGroup>, nullptr, nullptr, nullptr,
    0, // Object
    13, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, true, 
    //  17
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    17, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  18
    L"CheckoutManager.DeviceViewPage", L"",
    &ActivateType<::CheckoutManager::DeviceViewPage>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    17, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  19
    L"Windows.UI.Xaml.Input.ICommand", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    18, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  20
    L"Windows.UI.Xaml.Controls.Frame", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    18, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  21
    L"CheckoutManager.WeekViewControl", L"",
    &ActivateType<::CheckoutManager::WeekViewControl>, nullptr, nullptr, nullptr,
    23, // Windows.UI.Xaml.Controls.UserControl
    18, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  22
    L"CheckoutManager.MonthViewControl", L"",
    &ActivateType<::CheckoutManager::MonthViewControl>, nullptr, nullptr, nullptr,
    25, // Windows.UI.Xaml.Controls.CalendarView
    21, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  23
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  24
    L"CheckoutManager.AuthenticationDialog", L"",
    nullptr, nullptr, nullptr, nullptr,
    27, // Windows.UI.Xaml.Controls.ContentDialog
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  25
    L"Windows.UI.Xaml.Controls.CalendarView", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  26
    L"Windows.UI.Xaml.Media.SolidColorBrush", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  27
    L"Windows.UI.Xaml.Controls.ContentDialog", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  28
    L"Windows.UI.Xaml.Controls.ContentControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  29
    L"converters.BooleanToVisibilityConverter", L"",
    &ActivateType<::converters::BooleanToVisibilityConverter>, nullptr, nullptr, nullptr,
    0, // Object
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  30
    L"Windows.Foundation.Collections.IVector`1<CheckoutManager.Team>", L"",
    nullptr, &CollectionAdd<::Windows::Foundation::Collections::IVector<::CheckoutManager::Team^>, ::CheckoutManager::Team^>, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, true,  false,
    //  31
    L"Windows.Foundation.Collections.IVector`1<CheckoutManager.device>", L"",
    nullptr, &CollectionAdd<::Windows::Foundation::Collections::IVector<::CheckoutManager::device>, ::CheckoutManager::device>, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, true,  false,
    //  32
    L"Windows.Foundation.Collections.IVector`1<CheckoutManager.devicesGroup>", L"",
    nullptr, &CollectionAdd<::Windows::Foundation::Collections::IVector<::CheckoutManager::devicesGroup^>, ::CheckoutManager::devicesGroup^>, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, true,  false,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    false, false, false, false,
};

const UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      0,   //   6
      2,   //   7
      3,   //   8
      3,   //   9
      3,   //  10
      3,   //  11
      3,   //  12
      3,   //  13
      3,   //  14
      3,   //  15
      3,   //  16
      4,   //  17
      4,   //  18
      4,   //  19
      4,   //  20
      5,   //  21
      5,   //  22
      7,   //  23
      9,   //  24
     11,   //  25
     12,   //  26
     13,   //  27
     15,   //  28
     17,   //  29
     18,   //  30
     21,   //  31
     22,   //  32
     23,   //  33
     23,   //  34
     23,   //  35
     23,   //  36
     25,   //  37
     27,   //  38
     28,   //  39
     30,   //  40
     30,   //  41
     30,   //  42
     30,   //  43
     30,   //  44
     30,   //  45
     30,   //  46
     30,   //  47
     30,   //  48
     30,   //  49
     30,   //  50
     30,   //  51
     30,   //  52
     30,   //  53
     30,   //  54
     30,   //  55
     30,   //  56
     30,   //  57
     30,   //  58
     30,   //  59
     30,   //  60
     30,   //  61
     30,   //  62
     31,   //  63
     31,   //  64
     32,   //  65
     32,   //  66
     32,   //  67
     32,   //  68
     32,   //  69
     32,   //  70
     33,   //  71
};

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - CheckoutManager.Team.color
    L"color",
    &GetReferenceTypeMember_color<::CheckoutManager::Team>,
    &SetReferenceTypeMember_color<::CheckoutManager::Team, ::Windows::UI::Xaml::Media::SolidColorBrush>,
    26, // Windows.UI.Xaml.Media.SolidColorBrush
    -1,
    false, false, false,
    //   1 - CheckoutManager.Team.teamName
    L"teamName",
    &GetReferenceTypeMember_teamName<::CheckoutManager::Team>,
    &SetReferenceTypeMember_teamName<::CheckoutManager::Team, ::Platform::String>,
    1, // String
    -1,
    false, false, false,
    //   2 - CheckoutManager.Calpage.CurrentCalendar
    L"CurrentCalendar",
    &GetReferenceTypeMember_CurrentCalendar<::CheckoutManager::Calpage>,
    nullptr,
    7, // CheckoutManager.CalInfo
    -1,
    true,  false, false,
    //   3 - CheckoutManager.MainPage.AppFrame
    L"AppFrame",
    &GetReferenceTypeMember_AppFrame<::CheckoutManager::MainPage>,
    nullptr,
    20, // Windows.UI.Xaml.Controls.Frame
    -1,
    true,  false, false,
    //   4 - CheckoutManager.TeamPage.bindTeams
    L"bindTeams",
    &GetReferenceTypeMember_bindTeams<::CheckoutManager::TeamPage>,
    nullptr,
    30, // Windows.Foundation.Collections.IVector`1<CheckoutManager.Team>
    -1,
    true,  false, false,
    //   5 - CheckoutManager.WeekEvent.background
    L"background",
    &GetReferenceTypeMember_background<::CheckoutManager::WeekEvent>,
    nullptr,
    26, // Windows.UI.Xaml.Media.SolidColorBrush
    -1,
    true,  false, false,
    //   6 - CheckoutManager.WeekEvent.timeStr
    L"timeStr",
    &GetReferenceTypeMember_timeStr<::CheckoutManager::WeekEvent>,
    nullptr,
    1, // String
    -1,
    true,  false, false,
    //   7 - CheckoutManager.WeekEvent.deviceStr
    L"deviceStr",
    &GetReferenceTypeMember_deviceStr<::CheckoutManager::WeekEvent>,
    nullptr,
    1, // String
    -1,
    true,  false, false,
    //   8 - CheckoutManager.WeekEvent.manuallyhidden
    L"manuallyhidden",
    &GetValueTypeMember_manuallyhidden<::CheckoutManager::WeekEvent, ::Platform::Boolean>,
    &SetValueTypeMember_manuallyhidden<::CheckoutManager::WeekEvent, ::Platform::Boolean>,
    2, // Boolean
    -1,
    false, false, false,
    //   9 - CheckoutManager.WeekEvent.teamStr
    L"teamStr",
    &GetReferenceTypeMember_teamStr<::CheckoutManager::WeekEvent>,
    nullptr,
    1, // String
    -1,
    true,  false, false,
    //  10 - CheckoutManager.LandingPage.numdevices
    L"numdevices",
    &GetReferenceTypeMember_numdevices<::CheckoutManager::LandingPage>,
    &SetReferenceTypeMember_numdevices<::CheckoutManager::LandingPage, ::Platform::String>,
    1, // String
    -1,
    false, false, false,
    //  11 - CheckoutManager.LandingPage.dtf
    L"dtf",
    &GetReferenceTypeMember_dtf<::CheckoutManager::LandingPage>,
    nullptr,
    1, // String
    -1,
    true,  false, false,
    //  12 - CheckoutManager.LandingPage.datestr
    L"datestr",
    &GetReferenceTypeMember_datestr<::CheckoutManager::LandingPage>,
    nullptr,
    1, // String
    -1,
    true,  false, false,
    //  13 - CheckoutManager.devicesGroup.devices
    L"devices",
    &GetReferenceTypeMember_devices<::CheckoutManager::devicesGroup>,
    &SetReferenceTypeMember_devices<::CheckoutManager::devicesGroup, ::Windows::Foundation::Collections::IVector<::CheckoutManager::device>>,
    31, // Windows.Foundation.Collections.IVector`1<CheckoutManager.device>
    -1,
    false, false, false,
    //  14 - CheckoutManager.devicesGroup.deleteGroup
    L"deleteGroup",
    &GetReferenceTypeMember_deleteGroup<::CheckoutManager::devicesGroup>,
    nullptr,
    19, // Windows.UI.Xaml.Input.ICommand
    -1,
    true,  false, false,
    //  15 - CheckoutManager.devicesGroup.key
    L"key",
    &GetReferenceTypeMember_key<::CheckoutManager::devicesGroup>,
    &SetReferenceTypeMember_key<::CheckoutManager::devicesGroup, ::Platform::String>,
    1, // String
    -1,
    false, false, false,
    //  16 - CheckoutManager.devicesGroup.color
    L"color",
    &GetReferenceTypeMember_color<::CheckoutManager::devicesGroup>,
    &SetReferenceTypeMember_color<::CheckoutManager::devicesGroup, ::Windows::UI::Xaml::Media::SolidColorBrush>,
    26, // Windows.UI.Xaml.Media.SolidColorBrush
    -1,
    false, false, false,
    //  17 - CheckoutManager.DeviceViewPage.bindDevices
    L"bindDevices",
    &GetReferenceTypeMember_bindDevices<::CheckoutManager::DeviceViewPage>,
    nullptr,
    32, // Windows.Foundation.Collections.IVector`1<CheckoutManager.devicesGroup>
    -1,
    true,  false, false,
    //  18 - CheckoutManager.WeekViewControl.cal
    L"cal",
    &GetReferenceTypeMember_cal<::CheckoutManager::WeekViewControl>,
    &SetReferenceTypeMember_cal<::CheckoutManager::WeekViewControl, ::CheckoutManager::CalInfo>,
    7, // CheckoutManager.CalInfo
    -1,
    false, false, false,
    //  19 - CheckoutManager.WeekViewControl.dateRange
    L"dateRange",
    &GetReferenceTypeMember_dateRange<::CheckoutManager::WeekViewControl>,
    nullptr,
    1, // String
    -1,
    true,  false, false,
    //  20 - CheckoutManager.WeekViewControl.zoomed
    L"zoomed",
    &GetValueTypeMember_zoomed<::CheckoutManager::WeekViewControl, ::Platform::Boolean>,
    &SetValueTypeMember_zoomed<::CheckoutManager::WeekViewControl, ::Platform::Boolean>,
    2, // Boolean
    -1,
    false, false, false,
    //  21 - CheckoutManager.MonthViewControl.cal
    L"cal",
    &GetReferenceTypeMember_cal<::CheckoutManager::MonthViewControl>,
    &SetReferenceTypeMember_cal<::CheckoutManager::MonthViewControl, ::CheckoutManager::CalInfo>,
    7, // CheckoutManager.CalInfo
    -1,
    false, false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}

const TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    int typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

const MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    for (int lastDotIndex = longMemberName->Length(); lastDotIndex >= 0; lastDotIndex--)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            const TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->isSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->isLocalType;
        userType->IsReturnTypeStub = pTypeInfo->isReturnTypeStub;
        userType->IsBindable = pTypeInfo->isBindable;
        userType->CreateFromStringMethod = nullptr;
        if (pTypeInfo->createFromStringIndex != -1)
        {
            userType->CreateFromStringMethod = &(CreateFromStringMethods[pTypeInfo->createFromStringIndex]);
        }
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

