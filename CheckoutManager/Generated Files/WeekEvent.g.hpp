//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "WeekEvent.xaml.h"

void ::CheckoutManager::WeekEvent::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///WeekEvent.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class CheckoutManager::WeekEvent::WeekEvent_obj1_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::CheckoutManager::WeekEvent>
{
public:
    WeekEvent_obj1_Bindings()
    {
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 7:
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::RelativePanel^>(__target);
                break;
            case 8:
                this->obj8 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 11:
                this->obj11 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 12:
                this->obj12 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
        }
    }
private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::RelativePanel^ obj7;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj8;
    ::Windows::UI::Xaml::Documents::Run^ obj11;
    ::Windows::UI::Xaml::Documents::Run^ obj12;

    // Update methods for each path node used in binding steps.
    void Update_(::CheckoutManager::WeekEvent^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_background(obj->background, phase);
                this->Update_timeStr(obj->timeStr, phase);
                this->Update_teamStr(obj->teamStr, phase);
                this->Update_deviceStr(obj->deviceStr, phase);
            }
        }
    }
    void Update_background(::Windows::UI::Xaml::Media::SolidColorBrush^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Panel_Background(this->obj7, obj, nullptr);
        }
    }
    void Update_timeStr(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj8, obj, nullptr);
        }
    }
    void Update_teamStr(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj11, obj, nullptr);
        }
    }
    void Update_deviceStr(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj12, obj, nullptr);
        }
    }
};

void ::CheckoutManager::WeekEvent::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 1:
        {
            ::Windows::UI::Xaml::Controls::UserControl^ element1 = safe_cast<::Windows::UI::Xaml::Controls::UserControl^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::UserControl^>(element1))->Tapped += ref new ::Windows::UI::Xaml::Input::TappedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Input::TappedRoutedEventArgs^))&WeekEvent::UserControl_Tapped);
        }
        break;
    case 2:
        {
            ::Windows::UI::Xaml::Controls::MenuFlyoutItem^ element2 = safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(element2))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::MenuFlyoutItem_Click);
        }
        break;
    case 3:
        {
            ::Windows::UI::Xaml::Controls::MenuFlyoutItem^ element3 = safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(element3))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::MenuFlyoutItem_Click_1);
        }
        break;
    case 4:
        {
            this->DeviceID = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->DeviceID))->TextChanging += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs^>(this, (void (::CheckoutManager::WeekEvent::*)
                (::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs^))&WeekEvent::DeviceID_TextChanging);
        }
        break;
    case 5:
        {
            this->Password = safe_cast<::Windows::UI::Xaml::Controls::PasswordBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::PasswordBox^>(this->Password))->PasswordChanged += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::Password_PasswordChanged);
        }
        break;
    case 6:
        {
            ::Windows::UI::Xaml::Controls::Button^ element6 = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Button^>(element6))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::Button_Click);
        }
        break;
    case 7:
        {
            this->mainGrid = safe_cast<::Windows::UI::Xaml::Controls::RelativePanel^>(__target);
        }
        break;
    case 8:
        {
            this->timeblock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 9:
        {
            this->check = safe_cast<::Windows::UI::Xaml::Controls::SymbolIcon^>(__target);
        }
        break;
    case 10:
        {
            this->itemblock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::CheckoutManager::WeekEvent::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1:
            {
                ::Windows::UI::Xaml::Controls::UserControl^ element1 = safe_cast<::Windows::UI::Xaml::Controls::UserControl^>(__target);
                WeekEvent_obj1_Bindings* objBindings = new WeekEvent_obj1_Bindings();
                objBindings->SetDataRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


