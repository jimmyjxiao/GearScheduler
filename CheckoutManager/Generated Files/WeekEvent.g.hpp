//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "WeekEvent.xaml.h"

void ::CheckoutManager::WeekEvent::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///WeekEvent.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class CheckoutManager::WeekEvent::WeekEvent_obj1_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::CheckoutManager::WeekEvent>
{
public:
    WeekEvent_obj1_Bindings()
    {
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 8: // WeekEvent.xaml line 31
                this->obj8 = safe_cast<::Windows::UI::Xaml::Controls::RelativePanel^>(__target);
                break;
            case 9: // WeekEvent.xaml line 32
                this->obj9 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 12: // WeekEvent.xaml line 41
                this->obj12 = safe_cast<::Windows::UI::Xaml::Controls::Border^>(__target);
                break;
            case 13: // WeekEvent.xaml line 49
                this->obj13 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                // WeekEvent.xaml line 49
                if (this->obj13 != nullptr)
                {
                    ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj13, this->obj13TextDeferredValue, nullptr);
                }
                break;
            case 14: // WeekEvent.xaml line 45
                this->obj14 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                // WeekEvent.xaml line 45
                if (this->obj14 != nullptr)
                {
                    ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj14, this->obj14TextDeferredValue, nullptr);
                }
                break;
            case 15: // WeekEvent.xaml line 39
                this->obj15 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 16: // WeekEvent.xaml line 35
                this->obj16 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        switch (connectionId)
        {
            case 12: // WeekEvent.xaml line 41
            {
                if (this->obj12 != nullptr)
                {
                    this->obj12 = nullptr;
                }
                this->DisconnectUnloadedObject(13);
                this->DisconnectUnloadedObject(14);
                break;
            }
            case 13: // WeekEvent.xaml line 49
            {
                if (this->obj13 != nullptr)
                {
                    this->obj13TextDeferredValue = this->obj13->Text;
                    this->obj13 = nullptr;
                }
                break;
            }
            case 14: // WeekEvent.xaml line 45
            {
                if (this->obj14 != nullptr)
                {
                    this->obj14TextDeferredValue = this->obj14->Text;
                    this->obj14 = nullptr;
                }
                break;
            }
            default:
            {
                throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
            }
        }
    }

    void UpdateUnloadedElement(int connectionId)
    {
        switch (connectionId)
        {
            case 12: // WeekEvent.xaml line 41
            {
                // WeekEvent.xaml line 41
                if (this->obj12LoadDeferredValue)
                {
                    this->GetDataRoot()->FindName("fulfilledblock");
                }
                else
                {
                    this->GetDataRoot()->UnloadObject(this->obj12);
                }
                break;
            }
            default:
            {
                throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
            }
        }
    }
private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::RelativePanel^ obj8;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj9;
    ::Windows::UI::Xaml::Controls::Border^ obj12;
    ::Platform::Boolean obj12LoadDeferredValue;
    ::Windows::UI::Xaml::Documents::Run^ obj13;
    ::Platform::String^ obj13TextDeferredValue;
    ::Windows::UI::Xaml::Documents::Run^ obj14;
    ::Platform::String^ obj14TextDeferredValue;
    ::Windows::UI::Xaml::Documents::Run^ obj15;
    ::Windows::UI::Xaml::Documents::Run^ obj16;
    std::list<int> UnloadedElementsToUpdate;

    void CompleteUpdate(int phase)
    {
        while (!this->UnloadedElementsToUpdate.empty())
        {
            this->UpdateUnloadedElement(this->UnloadedElementsToUpdate.front());
            this->UnloadedElementsToUpdate.pop_front();
        }
    }

    // Update methods for each path node used in binding steps.
    void Update_(::CheckoutManager::WeekEvent^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_background(obj->background, phase);
                this->Update_timeStr(obj->timeStr, phase);
                this->Update_chk(obj->chk, phase);
                this->Update_actReturntime(obj->actReturntime, phase);
                this->Update_actChecktime(obj->actChecktime, phase);
                this->Update_teamStr(obj->teamStr, phase);
                this->Update_deviceStr(obj->deviceStr, phase);
            }
        }
        this->CompleteUpdate(phase);
    }
    void Update_background(::Windows::UI::Xaml::Media::SolidColorBrush^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // WeekEvent.xaml line 31
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Panel_Background(this->obj8, obj, nullptr);
        }
    }
    void Update_timeStr(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // WeekEvent.xaml line 32
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj9, obj, nullptr);
        }
    }
    void Update_chk(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // WeekEvent.xaml line 41
            this->obj12LoadDeferredValue = obj;
    
            if (obj)
            {
                this->GetDataRoot()->FindName("fulfilledblock");
            }
            else
            {
                this->GetDataRoot()->UnloadObject(this->obj12);
            }
        }
    }
    void Update_actReturntime(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // WeekEvent.xaml line 49
            if (this->obj13 != nullptr)
            {
                ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj13, obj, nullptr);
            }
            else
            {
                this->obj13TextDeferredValue = obj;
            }
        }
    }
    void Update_actChecktime(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // WeekEvent.xaml line 45
            if (this->obj14 != nullptr)
            {
                ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj14, obj, nullptr);
            }
            else
            {
                this->obj14TextDeferredValue = obj;
            }
        }
    }
    void Update_teamStr(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // WeekEvent.xaml line 39
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj15, obj, nullptr);
        }
    }
    void Update_deviceStr(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // WeekEvent.xaml line 35
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj16, obj, nullptr);
        }
    }
};

void ::CheckoutManager::WeekEvent::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 1:
        {
            ::Windows::UI::Xaml::Controls::UserControl^ element1 = safe_cast<::Windows::UI::Xaml::Controls::UserControl^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::UserControl^>(element1))->Tapped += ref new ::Windows::UI::Xaml::Input::TappedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Input::TappedRoutedEventArgs^))&WeekEvent::UserControl_Tapped);
        }
        break;
    case 2:
        {
            ::Windows::UI::Xaml::Controls::MenuFlyoutItem^ element2 = safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(element2))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::MenuFlyoutItem_Click);
        }
        break;
    case 3:
        {
            this->edit = safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(this->edit))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::edit_Click);
        }
        break;
    case 4:
        {
            ::Windows::UI::Xaml::Controls::MenuFlyoutItem^ element4 = safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutItem^>(element4))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::MenuFlyoutItem_Click_1);
        }
        break;
    case 5:
        {
            this->DeviceID = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->DeviceID))->TextChanging += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs^>(this, (void (::CheckoutManager::WeekEvent::*)
                (::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs^))&WeekEvent::DeviceID_TextChanging);
        }
        break;
    case 6:
        {
            this->Password = safe_cast<::Windows::UI::Xaml::Controls::PasswordBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::PasswordBox^>(this->Password))->PasswordChanged += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::Password_PasswordChanged);
        }
        break;
    case 7:
        {
            ::Windows::UI::Xaml::Controls::Button^ element7 = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Button^>(element7))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::CheckoutManager::WeekEvent::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&WeekEvent::Button_Click);
        }
        break;
    case 8:
        {
            this->mainGrid = safe_cast<::Windows::UI::Xaml::Controls::RelativePanel^>(__target);
        }
        break;
    case 9:
        {
            this->timeblock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 10:
        {
            this->itemblock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 11:
        {
            this->Userblock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 12:
        {
            this->fulfilledblock = safe_cast<::Windows::UI::Xaml::Controls::Border^>(__target);
        }
        break;
    }
    _contentLoaded = true;
}

void ::CheckoutManager::WeekEvent::UnloadObject(::Windows::UI::Xaml::DependencyObject^ unloadableObject)
{
    if (unloadableObject != nullptr)
    {
        // WeekEvent.xaml line 41
        if (unloadableObject == this->fulfilledblock)
        {
            this->DisconnectUnloadedObject(12);
        }
        ::Windows::UI::Xaml::Markup::XamlMarkupHelper::UnloadObject(unloadableObject);        
    }
}

void ::CheckoutManager::WeekEvent::DisconnectUnloadedObject(int connectionId)
{
    switch(connectionId)
    {
        case 12: // WeekEvent.xaml line 41
        {
            this->Bindings->DisconnectUnloadedObject(13);
            this->Bindings->DisconnectUnloadedObject(14);
            this->Bindings->DisconnectUnloadedObject(12);
            this->fulfilledblock = nullptr;
            break;
        }
        default:
        {
            throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
        }
    }
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::CheckoutManager::WeekEvent::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1: // WeekEvent.xaml line 1
            {
                ::Windows::UI::Xaml::Controls::UserControl^ element1 = safe_cast<::Windows::UI::Xaml::Controls::UserControl^>(__target);
                WeekEvent_obj1_Bindings* objBindings = new WeekEvent_obj1_Bindings();
                objBindings->SetDataRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


